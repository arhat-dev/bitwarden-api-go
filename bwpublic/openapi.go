// Package bwpublic provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package bwpublic

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/pkg/errors"
)

// AssociationWithPermissionsRequestModel defines model for AssociationWithPermissionsRequestModel.
type AssociationWithPermissionsRequestModel struct {

	// The associated object's unique identifier.
	Id string `json:"id"`

	// When true, the read only permission will not allow the user or group to make changes to items.
	ReadOnly bool `json:"readOnly"`
}

// AssociationWithPermissionsResponseModel defines model for AssociationWithPermissionsResponseModel.
type AssociationWithPermissionsResponseModel struct {

	// The associated object's unique identifier.
	Id string `json:"id"`

	// When true, the read only permission will not allow the user or group to make changes to items.
	ReadOnly bool `json:"readOnly"`
}

// CollectionResponseModel defines model for CollectionResponseModel.
type CollectionResponseModel struct {

	// External identifier for reference or linking this collection to another system.
	ExternalId *string `json:"externalId"`

	// The associated groups that this collection is assigned to.
	Groups *[]AssociationWithPermissionsResponseModel `json:"groups"`

	// The collection's unique identifier.
	Id string `json:"id"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// CollectionResponseModelListResponseModel defines model for CollectionResponseModelListResponseModel.
type CollectionResponseModelListResponseModel struct {

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken"`

	// An array containing the actual response elements, paginated by any request parameters.
	Data []CollectionResponseModel `json:"data"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// CollectionUpdateRequestModel defines model for CollectionUpdateRequestModel.
type CollectionUpdateRequestModel struct {

	// External identifier for reference or linking this collection to another system.
	ExternalId *string `json:"externalId"`

	// The associated groups that this collection is assigned to.
	Groups *[]AssociationWithPermissionsRequestModel `json:"groups"`
}

// DeviceType defines model for DeviceType.
type DeviceType int32

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {

	// If multiple errors occurred, they are listed in dictionary. Errors related to a specific
	// request parameter will include a dictionary key describing that parameter.
	Errors *ErrorResponseModel_Errors `json:"errors"`

	// A human-readable message providing details about the error.
	Message string `json:"message"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// ErrorResponseModel_Errors defines model for ErrorResponseModel.Errors.
type ErrorResponseModel_Errors struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// EventResponseModel defines model for EventResponseModel.
type EventResponseModel struct {

	// The unique identifier of the user that performed the event.
	ActingUserId *string `json:"actingUserId"`

	// The unique identifier of the related collection that the event describes.
	CollectionId *string `json:"collectionId"`

	// The date/timestamp when the event occurred.
	Date   time.Time   `json:"date"`
	Device *DeviceType `json:"device,omitempty"`

	// The unique identifier of the related group that the event describes.
	GroupId *string `json:"groupId"`

	// The IP address of the acting user.
	IpAddress *string `json:"ipAddress"`

	// The unique identifier of the related item that the event describes.
	ItemId *string `json:"itemId"`

	// The unique identifier of the related member that the event describes.
	MemberId *string `json:"memberId"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`

	// The unique identifier of the related policy that the event describes.
	PolicyId *string   `json:"policyId"`
	Type     EventType `json:"type"`
}

// EventResponseModelListResponseModel defines model for EventResponseModelListResponseModel.
type EventResponseModelListResponseModel struct {

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken"`

	// An array containing the actual response elements, paginated by any request parameters.
	Data []EventResponseModel `json:"data"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// EventType defines model for EventType.
type EventType int32

// GroupCreateUpdateRequestModel defines model for GroupCreateUpdateRequestModel.
type GroupCreateUpdateRequestModel struct {

	// Determines if this group can access all collections within the organization, or only the associated
	// collections. If set to {true}, this option overrides any collection assignments.
	AccessAll bool `json:"accessAll"`

	// The associated collections that this group can access.
	Collections *[]AssociationWithPermissionsRequestModel `json:"collections"`

	// External identifier for reference or linking this group to another system, such as a user directory.
	ExternalId *string `json:"externalId"`

	// The name of the group.
	Name string `json:"name"`
}

// GroupResponseModel defines model for GroupResponseModel.
type GroupResponseModel struct {

	// Determines if this group can access all collections within the organization, or only the associated
	// collections. If set to {true}, this option overrides any collection assignments.
	AccessAll bool `json:"accessAll"`

	// The associated collections that this group can access.
	Collections *[]AssociationWithPermissionsResponseModel `json:"collections"`

	// External identifier for reference or linking this group to another system, such as a user directory.
	ExternalId *string `json:"externalId"`

	// The group's unique identifier.
	Id string `json:"id"`

	// The name of the group.
	Name string `json:"name"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// GroupResponseModelListResponseModel defines model for GroupResponseModelListResponseModel.
type GroupResponseModelListResponseModel struct {

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken"`

	// An array containing the actual response elements, paginated by any request parameters.
	Data []GroupResponseModel `json:"data"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// MemberCreateRequestModel defines model for MemberCreateRequestModel.
type MemberCreateRequestModel struct {

	// Determines if this member can access all collections within the organization, or only the associated
	// collections. If set to {true}, this option overrides any collection assignments.
	AccessAll bool `json:"accessAll"`

	// The associated collections that this member can access.
	Collections *[]AssociationWithPermissionsRequestModel `json:"collections"`

	// The member's email address.
	Email openapi_types.Email `json:"email"`

	// External identifier for reference or linking this member to another system, such as a user directory.
	ExternalId *string              `json:"externalId"`
	Type       OrganizationUserType `json:"type"`
}

// MemberResponseModel defines model for MemberResponseModel.
type MemberResponseModel struct {

	// Determines if this member can access all collections within the organization, or only the associated
	// collections. If set to {true}, this option overrides any collection assignments.
	AccessAll bool `json:"accessAll"`

	// The associated collections that this member can access.
	Collections *[]AssociationWithPermissionsResponseModel `json:"collections"`

	// The member's email address.
	Email string `json:"email"`

	// External identifier for reference or linking this member to another system, such as a user directory.
	ExternalId *string `json:"externalId"`

	// The member's unique identifier within the organization.
	Id string `json:"id"`

	// The member's name, set from their user account profile.
	Name *string `json:"name"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string                     `json:"object"`
	Status OrganizationUserStatusType `json:"status"`

	// Returns {true} if the member has a two-step login method enabled on their user account.
	TwoFactorEnabled bool                 `json:"twoFactorEnabled"`
	Type             OrganizationUserType `json:"type"`

	// The member's unique identifier across Bitwarden.
	UserId string `json:"userId"`
}

// MemberResponseModelListResponseModel defines model for MemberResponseModelListResponseModel.
type MemberResponseModelListResponseModel struct {

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken"`

	// An array containing the actual response elements, paginated by any request parameters.
	Data []MemberResponseModel `json:"data"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// MemberUpdateRequestModel defines model for MemberUpdateRequestModel.
type MemberUpdateRequestModel struct {

	// Determines if this member can access all collections within the organization, or only the associated
	// collections. If set to {true}, this option overrides any collection assignments.
	AccessAll bool `json:"accessAll"`

	// The associated collections that this member can access.
	Collections *[]AssociationWithPermissionsRequestModel `json:"collections"`

	// External identifier for reference or linking this member to another system, such as a user directory.
	ExternalId *string              `json:"externalId"`
	Type       OrganizationUserType `json:"type"`
}

// OrganizationImportGroupRequestModel defines model for OrganizationImportGroupRequestModel.
type OrganizationImportGroupRequestModel struct {

	// External identifier for reference or linking this group to another system, such as a user directory.
	ExternalId string `json:"externalId"`

	// The associated external ids for members in this group.
	MemberExternalIds *[]string `json:"memberExternalIds"`

	// The name of the group.
	Name string `json:"name"`
}

// OrganizationImportMemberRequestModel defines model for OrganizationImportMemberRequestModel.
type OrganizationImportMemberRequestModel struct {

	// Determines if this member should be removed from the organization during import.
	Deleted *bool `json:"deleted,omitempty"`

	// The member's email address. Required for non-deleted users.
	Email *openapi_types.Email `json:"email"`

	// External identifier for reference or linking this member to another system, such as a user directory.
	ExternalId string `json:"externalId"`
}

// OrganizationImportRequestModel defines model for OrganizationImportRequestModel.
type OrganizationImportRequestModel struct {

	// Groups to import.
	Groups *[]OrganizationImportGroupRequestModel `json:"groups"`

	// Members to import.
	Members *[]OrganizationImportMemberRequestModel `json:"members"`

	// Determines if the data in this request should overwrite or append to the existing organization data.
	OverwriteExisting bool `json:"overwriteExisting"`
}

// OrganizationUserStatusType defines model for OrganizationUserStatusType.
type OrganizationUserStatusType int32

// OrganizationUserType defines model for OrganizationUserType.
type OrganizationUserType int32

// PolicyResponseModel defines model for PolicyResponseModel.
type PolicyResponseModel struct {

	// Data for the policy.
	Data *PolicyResponseModel_Data `json:"data"`

	// Determines if this policy is enabled and enforced.
	Enabled bool `json:"enabled"`

	// The policy's unique identifier.
	Id string `json:"id"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string     `json:"object"`
	Type   PolicyType `json:"type"`
}

// PolicyResponseModel_Data defines model for PolicyResponseModel.Data.
type PolicyResponseModel_Data struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// PolicyResponseModelListResponseModel defines model for PolicyResponseModelListResponseModel.
type PolicyResponseModelListResponseModel struct {

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken"`

	// An array containing the actual response elements, paginated by any request parameters.
	Data []PolicyResponseModel `json:"data"`

	// String representing the object's type. Objects of the same type share the same properties.
	Object string `json:"object"`
}

// PolicyType defines model for PolicyType.
type PolicyType int32

// PolicyUpdateRequestModel defines model for PolicyUpdateRequestModel.
type PolicyUpdateRequestModel struct {

	// Data for the policy.
	Data *PolicyUpdateRequestModel_Data `json:"data"`

	// Determines if this policy is enabled and enforced.
	Enabled bool `json:"enabled"`
}

// PolicyUpdateRequestModel_Data defines model for PolicyUpdateRequestModel.Data.
type PolicyUpdateRequestModel_Data struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// UpdateGroupIdsRequestModel defines model for UpdateGroupIdsRequestModel.
type UpdateGroupIdsRequestModel struct {

	// The associated group ids that this object can access.
	GroupIds *[]string `json:"groupIds"`
}

// UpdateMemberIdsRequestModel defines model for UpdateMemberIdsRequestModel.
type UpdateMemberIdsRequestModel struct {

	// The associated member ids that have access to this object.
	MemberIds *[]string `json:"memberIds"`
}

// PutPublicCollectionsIdJSONBody defines parameters for PutPublicCollectionsId.
type PutPublicCollectionsIdJSONBody CollectionUpdateRequestModel

// GetPublicEventsParams defines parameters for GetPublicEvents.
type GetPublicEventsParams struct {

	// The start date. Must be less than the end date.
	Start *time.Time `json:"start,omitempty"`

	// The end date. Must be greater than the start date.
	End *time.Time `json:"end,omitempty"`

	// The unique identifier of the user that performed the event.
	ActingUserId *string `json:"actingUserId,omitempty"`

	// The unique identifier of the related item that the event describes.
	ItemId *string `json:"itemId,omitempty"`

	// A cursor for use in pagination.
	ContinuationToken *string `json:"continuationToken,omitempty"`
}

// PostPublicGroupsJSONBody defines parameters for PostPublicGroups.
type PostPublicGroupsJSONBody GroupCreateUpdateRequestModel

// PutPublicGroupsIdJSONBody defines parameters for PutPublicGroupsId.
type PutPublicGroupsIdJSONBody GroupCreateUpdateRequestModel

// PutPublicGroupsIdMemberIdsJSONBody defines parameters for PutPublicGroupsIdMemberIds.
type PutPublicGroupsIdMemberIdsJSONBody UpdateMemberIdsRequestModel

// PostPublicMembersJSONBody defines parameters for PostPublicMembers.
type PostPublicMembersJSONBody MemberCreateRequestModel

// PutPublicMembersIdJSONBody defines parameters for PutPublicMembersId.
type PutPublicMembersIdJSONBody MemberUpdateRequestModel

// PutPublicMembersIdGroupIdsJSONBody defines parameters for PutPublicMembersIdGroupIds.
type PutPublicMembersIdGroupIdsJSONBody UpdateGroupIdsRequestModel

// PostPublicOrganizationImportJSONBody defines parameters for PostPublicOrganizationImport.
type PostPublicOrganizationImportJSONBody OrganizationImportRequestModel

// PutPublicPoliciesIdJSONBody defines parameters for PutPublicPoliciesId.
type PutPublicPoliciesIdJSONBody PolicyUpdateRequestModel

// PutPublicPoliciesIdParams defines parameters for PutPublicPoliciesId.
type PutPublicPoliciesIdParams struct {

	// The type of policy to be updated.
	Type *PolicyType `json:"type,omitempty"`
}

// PutPublicCollectionsIdJSONRequestBody defines body for PutPublicCollectionsId for application/json ContentType.
type PutPublicCollectionsIdJSONRequestBody PutPublicCollectionsIdJSONBody

// PostPublicGroupsJSONRequestBody defines body for PostPublicGroups for application/json ContentType.
type PostPublicGroupsJSONRequestBody PostPublicGroupsJSONBody

// PutPublicGroupsIdJSONRequestBody defines body for PutPublicGroupsId for application/json ContentType.
type PutPublicGroupsIdJSONRequestBody PutPublicGroupsIdJSONBody

// PutPublicGroupsIdMemberIdsJSONRequestBody defines body for PutPublicGroupsIdMemberIds for application/json ContentType.
type PutPublicGroupsIdMemberIdsJSONRequestBody PutPublicGroupsIdMemberIdsJSONBody

// PostPublicMembersJSONRequestBody defines body for PostPublicMembers for application/json ContentType.
type PostPublicMembersJSONRequestBody PostPublicMembersJSONBody

// PutPublicMembersIdJSONRequestBody defines body for PutPublicMembersId for application/json ContentType.
type PutPublicMembersIdJSONRequestBody PutPublicMembersIdJSONBody

// PutPublicMembersIdGroupIdsJSONRequestBody defines body for PutPublicMembersIdGroupIds for application/json ContentType.
type PutPublicMembersIdGroupIdsJSONRequestBody PutPublicMembersIdGroupIdsJSONBody

// PostPublicOrganizationImportJSONRequestBody defines body for PostPublicOrganizationImport for application/json ContentType.
type PostPublicOrganizationImportJSONRequestBody PostPublicOrganizationImportJSONBody

// PutPublicPoliciesIdJSONRequestBody defines body for PutPublicPoliciesId for application/json ContentType.
type PutPublicPoliciesIdJSONRequestBody PutPublicPoliciesIdJSONBody

// Getter for additional properties for ErrorResponseModel_Errors. Returns the specified
// element and whether it was found
func (a ErrorResponseModel_Errors) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorResponseModel_Errors
func (a *ErrorResponseModel_Errors) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorResponseModel_Errors to handle AdditionalProperties
func (a *ErrorResponseModel_Errors) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorResponseModel_Errors to handle AdditionalProperties
func (a ErrorResponseModel_Errors) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyResponseModel_Data. Returns the specified
// element and whether it was found
func (a PolicyResponseModel_Data) Get(fieldName string) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyResponseModel_Data
func (a *PolicyResponseModel_Data) Set(fieldName string, value map[string]interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyResponseModel_Data to handle AdditionalProperties
func (a *PolicyResponseModel_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyResponseModel_Data to handle AdditionalProperties
func (a PolicyResponseModel_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyUpdateRequestModel_Data. Returns the specified
// element and whether it was found
func (a PolicyUpdateRequestModel_Data) Get(fieldName string) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyUpdateRequestModel_Data
func (a *PolicyUpdateRequestModel_Data) Set(fieldName string, value map[string]interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyUpdateRequestModel_Data to handle AdditionalProperties
func (a *PolicyUpdateRequestModel_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyUpdateRequestModel_Data to handle AdditionalProperties
func (a PolicyUpdateRequestModel_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPublicCollections request
	GetPublicCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicCollectionsId request
	DeletePublicCollectionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCollectionsId request
	GetPublicCollectionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicCollectionsId request  with any body
	PutPublicCollectionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicCollectionsId(ctx context.Context, id string, body PutPublicCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicEvents request
	GetPublicEvents(ctx context.Context, params *GetPublicEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicGroups request
	GetPublicGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicGroups request  with any body
	PostPublicGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicGroups(ctx context.Context, body PostPublicGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicGroupsId request
	DeletePublicGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicGroupsId request
	GetPublicGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicGroupsId request  with any body
	PutPublicGroupsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicGroupsId(ctx context.Context, id string, body PutPublicGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicGroupsIdMemberIds request
	GetPublicGroupsIdMemberIds(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicGroupsIdMemberIds request  with any body
	PutPublicGroupsIdMemberIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicGroupsIdMemberIds(ctx context.Context, id string, body PutPublicGroupsIdMemberIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMembers request
	GetPublicMembers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicMembers request  with any body
	PostPublicMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicMembers(ctx context.Context, body PostPublicMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicMembersId request
	DeletePublicMembersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMembersId request
	GetPublicMembersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicMembersId request  with any body
	PutPublicMembersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicMembersId(ctx context.Context, id string, body PutPublicMembersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMembersIdGroupIds request
	GetPublicMembersIdGroupIds(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicMembersIdGroupIds request  with any body
	PutPublicMembersIdGroupIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicMembersIdGroupIds(ctx context.Context, id string, body PutPublicMembersIdGroupIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicMembersIdReinvite request
	PostPublicMembersIdReinvite(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicOrganizationImport request  with any body
	PostPublicOrganizationImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicOrganizationImport(ctx context.Context, body PostPublicOrganizationImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicPolicies request
	GetPublicPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublicPoliciesId request  with any body
	PutPublicPoliciesIdWithBody(ctx context.Context, id string, params *PutPublicPoliciesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublicPoliciesId(ctx context.Context, id string, params *PutPublicPoliciesIdParams, body PutPublicPoliciesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicPoliciesType request
	GetPublicPoliciesType(ctx context.Context, pType PolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPublicCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicCollectionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicCollectionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCollectionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCollectionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicCollectionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicCollectionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicCollectionsId(ctx context.Context, id string, body PutPublicCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicCollectionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicEvents(ctx context.Context, params *GetPublicEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicGroups(ctx context.Context, body PostPublicGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicGroupsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicGroupsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicGroupsId(ctx context.Context, id string, body PutPublicGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicGroupsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicGroupsIdMemberIds(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicGroupsIdMemberIdsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicGroupsIdMemberIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicGroupsIdMemberIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicGroupsIdMemberIds(ctx context.Context, id string, body PutPublicGroupsIdMemberIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicGroupsIdMemberIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMembers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMembersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicMembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicMembers(ctx context.Context, body PostPublicMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicMembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicMembersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicMembersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMembersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMembersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicMembersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicMembersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicMembersId(ctx context.Context, id string, body PutPublicMembersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicMembersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMembersIdGroupIds(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMembersIdGroupIdsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicMembersIdGroupIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicMembersIdGroupIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicMembersIdGroupIds(ctx context.Context, id string, body PutPublicMembersIdGroupIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicMembersIdGroupIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicMembersIdReinvite(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicMembersIdReinviteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicOrganizationImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicOrganizationImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicOrganizationImport(ctx context.Context, body PostPublicOrganizationImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicOrganizationImportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicPoliciesIdWithBody(ctx context.Context, id string, params *PutPublicPoliciesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicPoliciesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublicPoliciesId(ctx context.Context, id string, params *PutPublicPoliciesIdParams, body PutPublicPoliciesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublicPoliciesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicPoliciesType(ctx context.Context, pType PolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicPoliciesTypeRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPublicCollectionsRequest generates requests for GetPublicCollections
func NewGetPublicCollectionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/collections")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePublicCollectionsIdRequest generates requests for DeletePublicCollectionsId
func NewDeletePublicCollectionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/collections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCollectionsIdRequest generates requests for GetPublicCollectionsId
func NewGetPublicCollectionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/collections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicCollectionsIdRequest calls the generic PutPublicCollectionsId builder with application/json body
func NewPutPublicCollectionsIdRequest(server string, id string, body PutPublicCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicCollectionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPublicCollectionsIdRequestWithBody generates requests for PutPublicCollectionsId with any type of body
func NewPutPublicCollectionsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/collections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicEventsRequest generates requests for GetPublicEvents
func NewGetPublicEventsRequest(server string, params *GetPublicEventsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/events")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end", *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActingUserId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "actingUserId", *params.ActingUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "itemId", *params.ItemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContinuationToken != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "continuationToken", *params.ContinuationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicGroupsRequest generates requests for GetPublicGroups
func NewGetPublicGroupsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicGroupsRequest calls the generic PostPublicGroups builder with application/json body
func NewPostPublicGroupsRequest(server string, body PostPublicGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPublicGroupsRequestWithBody generates requests for PostPublicGroups with any type of body
func NewPostPublicGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePublicGroupsIdRequest generates requests for DeletePublicGroupsId
func NewDeletePublicGroupsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicGroupsIdRequest generates requests for GetPublicGroupsId
func NewGetPublicGroupsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicGroupsIdRequest calls the generic PutPublicGroupsId builder with application/json body
func NewPutPublicGroupsIdRequest(server string, id string, body PutPublicGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicGroupsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPublicGroupsIdRequestWithBody generates requests for PutPublicGroupsId with any type of body
func NewPutPublicGroupsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicGroupsIdMemberIdsRequest generates requests for GetPublicGroupsIdMemberIds
func NewGetPublicGroupsIdMemberIdsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups/%s/member-ids", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicGroupsIdMemberIdsRequest calls the generic PutPublicGroupsIdMemberIds builder with application/json body
func NewPutPublicGroupsIdMemberIdsRequest(server string, id string, body PutPublicGroupsIdMemberIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicGroupsIdMemberIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPublicGroupsIdMemberIdsRequestWithBody generates requests for PutPublicGroupsIdMemberIds with any type of body
func NewPutPublicGroupsIdMemberIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/groups/%s/member-ids", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicMembersRequest generates requests for GetPublicMembers
func NewGetPublicMembersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicMembersRequest calls the generic PostPublicMembers builder with application/json body
func NewPostPublicMembersRequest(server string, body PostPublicMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicMembersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPublicMembersRequestWithBody generates requests for PostPublicMembers with any type of body
func NewPostPublicMembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePublicMembersIdRequest generates requests for DeletePublicMembersId
func NewDeletePublicMembersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMembersIdRequest generates requests for GetPublicMembersId
func NewGetPublicMembersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicMembersIdRequest calls the generic PutPublicMembersId builder with application/json body
func NewPutPublicMembersIdRequest(server string, id string, body PutPublicMembersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicMembersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPublicMembersIdRequestWithBody generates requests for PutPublicMembersId with any type of body
func NewPutPublicMembersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicMembersIdGroupIdsRequest generates requests for GetPublicMembersIdGroupIds
func NewGetPublicMembersIdGroupIdsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s/group-ids", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicMembersIdGroupIdsRequest calls the generic PutPublicMembersIdGroupIds builder with application/json body
func NewPutPublicMembersIdGroupIdsRequest(server string, id string, body PutPublicMembersIdGroupIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicMembersIdGroupIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPublicMembersIdGroupIdsRequestWithBody generates requests for PutPublicMembersIdGroupIds with any type of body
func NewPutPublicMembersIdGroupIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s/group-ids", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPublicMembersIdReinviteRequest generates requests for PostPublicMembersIdReinvite
func NewPostPublicMembersIdReinviteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/members/%s/reinvite", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicOrganizationImportRequest calls the generic PostPublicOrganizationImport builder with application/json body
func NewPostPublicOrganizationImportRequest(server string, body PostPublicOrganizationImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicOrganizationImportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPublicOrganizationImportRequestWithBody generates requests for PostPublicOrganizationImport with any type of body
func NewPostPublicOrganizationImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/organization/import")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicPoliciesRequest generates requests for GetPublicPolicies
func NewGetPublicPoliciesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/policies")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPublicPoliciesIdRequest calls the generic PutPublicPoliciesId builder with application/json body
func NewPutPublicPoliciesIdRequest(server string, id string, params *PutPublicPoliciesIdParams, body PutPublicPoliciesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublicPoliciesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPublicPoliciesIdRequestWithBody generates requests for PutPublicPoliciesId with any type of body
func NewPutPublicPoliciesIdRequestWithBody(server string, id string, params *PutPublicPoliciesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/policies/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicPoliciesTypeRequest generates requests for GetPublicPoliciesType
func NewGetPublicPoliciesTypeRequest(server string, pType PolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "type", pType)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/policies/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPublicCollections request
	GetPublicCollectionsWithResponse(ctx context.Context) (*GetPublicCollectionsResponse, error)

	// DeletePublicCollectionsId request
	DeletePublicCollectionsIdWithResponse(ctx context.Context, id string) (*DeletePublicCollectionsIdResponse, error)

	// GetPublicCollectionsId request
	GetPublicCollectionsIdWithResponse(ctx context.Context, id string) (*GetPublicCollectionsIdResponse, error)

	// PutPublicCollectionsId request  with any body
	PutPublicCollectionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicCollectionsIdResponse, error)

	PutPublicCollectionsIdWithResponse(ctx context.Context, id string, body PutPublicCollectionsIdJSONRequestBody) (*PutPublicCollectionsIdResponse, error)

	// GetPublicEvents request
	GetPublicEventsWithResponse(ctx context.Context, params *GetPublicEventsParams) (*GetPublicEventsResponse, error)

	// GetPublicGroups request
	GetPublicGroupsWithResponse(ctx context.Context) (*GetPublicGroupsResponse, error)

	// PostPublicGroups request  with any body
	PostPublicGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicGroupsResponse, error)

	PostPublicGroupsWithResponse(ctx context.Context, body PostPublicGroupsJSONRequestBody) (*PostPublicGroupsResponse, error)

	// DeletePublicGroupsId request
	DeletePublicGroupsIdWithResponse(ctx context.Context, id string) (*DeletePublicGroupsIdResponse, error)

	// GetPublicGroupsId request
	GetPublicGroupsIdWithResponse(ctx context.Context, id string) (*GetPublicGroupsIdResponse, error)

	// PutPublicGroupsId request  with any body
	PutPublicGroupsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicGroupsIdResponse, error)

	PutPublicGroupsIdWithResponse(ctx context.Context, id string, body PutPublicGroupsIdJSONRequestBody) (*PutPublicGroupsIdResponse, error)

	// GetPublicGroupsIdMemberIds request
	GetPublicGroupsIdMemberIdsWithResponse(ctx context.Context, id string) (*GetPublicGroupsIdMemberIdsResponse, error)

	// PutPublicGroupsIdMemberIds request  with any body
	PutPublicGroupsIdMemberIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicGroupsIdMemberIdsResponse, error)

	PutPublicGroupsIdMemberIdsWithResponse(ctx context.Context, id string, body PutPublicGroupsIdMemberIdsJSONRequestBody) (*PutPublicGroupsIdMemberIdsResponse, error)

	// GetPublicMembers request
	GetPublicMembersWithResponse(ctx context.Context) (*GetPublicMembersResponse, error)

	// PostPublicMembers request  with any body
	PostPublicMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicMembersResponse, error)

	PostPublicMembersWithResponse(ctx context.Context, body PostPublicMembersJSONRequestBody) (*PostPublicMembersResponse, error)

	// DeletePublicMembersId request
	DeletePublicMembersIdWithResponse(ctx context.Context, id string) (*DeletePublicMembersIdResponse, error)

	// GetPublicMembersId request
	GetPublicMembersIdWithResponse(ctx context.Context, id string) (*GetPublicMembersIdResponse, error)

	// PutPublicMembersId request  with any body
	PutPublicMembersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicMembersIdResponse, error)

	PutPublicMembersIdWithResponse(ctx context.Context, id string, body PutPublicMembersIdJSONRequestBody) (*PutPublicMembersIdResponse, error)

	// GetPublicMembersIdGroupIds request
	GetPublicMembersIdGroupIdsWithResponse(ctx context.Context, id string) (*GetPublicMembersIdGroupIdsResponse, error)

	// PutPublicMembersIdGroupIds request  with any body
	PutPublicMembersIdGroupIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicMembersIdGroupIdsResponse, error)

	PutPublicMembersIdGroupIdsWithResponse(ctx context.Context, id string, body PutPublicMembersIdGroupIdsJSONRequestBody) (*PutPublicMembersIdGroupIdsResponse, error)

	// PostPublicMembersIdReinvite request
	PostPublicMembersIdReinviteWithResponse(ctx context.Context, id string) (*PostPublicMembersIdReinviteResponse, error)

	// PostPublicOrganizationImport request  with any body
	PostPublicOrganizationImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicOrganizationImportResponse, error)

	PostPublicOrganizationImportWithResponse(ctx context.Context, body PostPublicOrganizationImportJSONRequestBody) (*PostPublicOrganizationImportResponse, error)

	// GetPublicPolicies request
	GetPublicPoliciesWithResponse(ctx context.Context) (*GetPublicPoliciesResponse, error)

	// PutPublicPoliciesId request  with any body
	PutPublicPoliciesIdWithBodyWithResponse(ctx context.Context, id string, params *PutPublicPoliciesIdParams, contentType string, body io.Reader) (*PutPublicPoliciesIdResponse, error)

	PutPublicPoliciesIdWithResponse(ctx context.Context, id string, params *PutPublicPoliciesIdParams, body PutPublicPoliciesIdJSONRequestBody) (*PutPublicPoliciesIdResponse, error)

	// GetPublicPoliciesType request
	GetPublicPoliciesTypeWithResponse(ctx context.Context, pType PolicyType) (*GetPublicPoliciesTypeResponse, error)
}

type GetPublicCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePublicCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPublicGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePublicGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicGroupsIdMemberIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPublicGroupsIdMemberIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicGroupsIdMemberIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicGroupsIdMemberIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicGroupsIdMemberIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicGroupsIdMemberIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPublicMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicMembersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePublicMembersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicMembersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMembersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicMembersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMembersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicMembersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicMembersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicMembersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMembersIdGroupIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPublicMembersIdGroupIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMembersIdGroupIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicMembersIdGroupIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicMembersIdGroupIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicMembersIdGroupIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicMembersIdReinviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPublicMembersIdReinviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicMembersIdReinviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicOrganizationImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPublicOrganizationImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicOrganizationImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublicPoliciesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModel
	JSON400      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPublicPoliciesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublicPoliciesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicPoliciesTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPublicPoliciesTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicPoliciesTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPublicCollectionsWithResponse request returning *GetPublicCollectionsResponse
func (c *ClientWithResponses) GetPublicCollectionsWithResponse(ctx context.Context) (*GetPublicCollectionsResponse, error) {
	rsp, err := c.GetPublicCollections(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCollectionsResponse(rsp)
}

// DeletePublicCollectionsIdWithResponse request returning *DeletePublicCollectionsIdResponse
func (c *ClientWithResponses) DeletePublicCollectionsIdWithResponse(ctx context.Context, id string) (*DeletePublicCollectionsIdResponse, error) {
	rsp, err := c.DeletePublicCollectionsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicCollectionsIdResponse(rsp)
}

// GetPublicCollectionsIdWithResponse request returning *GetPublicCollectionsIdResponse
func (c *ClientWithResponses) GetPublicCollectionsIdWithResponse(ctx context.Context, id string) (*GetPublicCollectionsIdResponse, error) {
	rsp, err := c.GetPublicCollectionsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCollectionsIdResponse(rsp)
}

// PutPublicCollectionsIdWithBodyWithResponse request with arbitrary body returning *PutPublicCollectionsIdResponse
func (c *ClientWithResponses) PutPublicCollectionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicCollectionsIdResponse, error) {
	rsp, err := c.PutPublicCollectionsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutPublicCollectionsIdWithResponse(ctx context.Context, id string, body PutPublicCollectionsIdJSONRequestBody) (*PutPublicCollectionsIdResponse, error) {
	rsp, err := c.PutPublicCollectionsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicCollectionsIdResponse(rsp)
}

// GetPublicEventsWithResponse request returning *GetPublicEventsResponse
func (c *ClientWithResponses) GetPublicEventsWithResponse(ctx context.Context, params *GetPublicEventsParams) (*GetPublicEventsResponse, error) {
	rsp, err := c.GetPublicEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicEventsResponse(rsp)
}

// GetPublicGroupsWithResponse request returning *GetPublicGroupsResponse
func (c *ClientWithResponses) GetPublicGroupsWithResponse(ctx context.Context) (*GetPublicGroupsResponse, error) {
	rsp, err := c.GetPublicGroups(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicGroupsResponse(rsp)
}

// PostPublicGroupsWithBodyWithResponse request with arbitrary body returning *PostPublicGroupsResponse
func (c *ClientWithResponses) PostPublicGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicGroupsResponse, error) {
	rsp, err := c.PostPublicGroupsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostPublicGroupsWithResponse(ctx context.Context, body PostPublicGroupsJSONRequestBody) (*PostPublicGroupsResponse, error) {
	rsp, err := c.PostPublicGroups(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicGroupsResponse(rsp)
}

// DeletePublicGroupsIdWithResponse request returning *DeletePublicGroupsIdResponse
func (c *ClientWithResponses) DeletePublicGroupsIdWithResponse(ctx context.Context, id string) (*DeletePublicGroupsIdResponse, error) {
	rsp, err := c.DeletePublicGroupsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicGroupsIdResponse(rsp)
}

// GetPublicGroupsIdWithResponse request returning *GetPublicGroupsIdResponse
func (c *ClientWithResponses) GetPublicGroupsIdWithResponse(ctx context.Context, id string) (*GetPublicGroupsIdResponse, error) {
	rsp, err := c.GetPublicGroupsId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicGroupsIdResponse(rsp)
}

// PutPublicGroupsIdWithBodyWithResponse request with arbitrary body returning *PutPublicGroupsIdResponse
func (c *ClientWithResponses) PutPublicGroupsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicGroupsIdResponse, error) {
	rsp, err := c.PutPublicGroupsIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PutPublicGroupsIdWithResponse(ctx context.Context, id string, body PutPublicGroupsIdJSONRequestBody) (*PutPublicGroupsIdResponse, error) {
	rsp, err := c.PutPublicGroupsId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicGroupsIdResponse(rsp)
}

// GetPublicGroupsIdMemberIdsWithResponse request returning *GetPublicGroupsIdMemberIdsResponse
func (c *ClientWithResponses) GetPublicGroupsIdMemberIdsWithResponse(ctx context.Context, id string) (*GetPublicGroupsIdMemberIdsResponse, error) {
	rsp, err := c.GetPublicGroupsIdMemberIds(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicGroupsIdMemberIdsResponse(rsp)
}

// PutPublicGroupsIdMemberIdsWithBodyWithResponse request with arbitrary body returning *PutPublicGroupsIdMemberIdsResponse
func (c *ClientWithResponses) PutPublicGroupsIdMemberIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicGroupsIdMemberIdsResponse, error) {
	rsp, err := c.PutPublicGroupsIdMemberIdsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicGroupsIdMemberIdsResponse(rsp)
}

func (c *ClientWithResponses) PutPublicGroupsIdMemberIdsWithResponse(ctx context.Context, id string, body PutPublicGroupsIdMemberIdsJSONRequestBody) (*PutPublicGroupsIdMemberIdsResponse, error) {
	rsp, err := c.PutPublicGroupsIdMemberIds(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicGroupsIdMemberIdsResponse(rsp)
}

// GetPublicMembersWithResponse request returning *GetPublicMembersResponse
func (c *ClientWithResponses) GetPublicMembersWithResponse(ctx context.Context) (*GetPublicMembersResponse, error) {
	rsp, err := c.GetPublicMembers(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMembersResponse(rsp)
}

// PostPublicMembersWithBodyWithResponse request with arbitrary body returning *PostPublicMembersResponse
func (c *ClientWithResponses) PostPublicMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicMembersResponse, error) {
	rsp, err := c.PostPublicMembersWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicMembersResponse(rsp)
}

func (c *ClientWithResponses) PostPublicMembersWithResponse(ctx context.Context, body PostPublicMembersJSONRequestBody) (*PostPublicMembersResponse, error) {
	rsp, err := c.PostPublicMembers(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicMembersResponse(rsp)
}

// DeletePublicMembersIdWithResponse request returning *DeletePublicMembersIdResponse
func (c *ClientWithResponses) DeletePublicMembersIdWithResponse(ctx context.Context, id string) (*DeletePublicMembersIdResponse, error) {
	rsp, err := c.DeletePublicMembersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicMembersIdResponse(rsp)
}

// GetPublicMembersIdWithResponse request returning *GetPublicMembersIdResponse
func (c *ClientWithResponses) GetPublicMembersIdWithResponse(ctx context.Context, id string) (*GetPublicMembersIdResponse, error) {
	rsp, err := c.GetPublicMembersId(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMembersIdResponse(rsp)
}

// PutPublicMembersIdWithBodyWithResponse request with arbitrary body returning *PutPublicMembersIdResponse
func (c *ClientWithResponses) PutPublicMembersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicMembersIdResponse, error) {
	rsp, err := c.PutPublicMembersIdWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicMembersIdResponse(rsp)
}

func (c *ClientWithResponses) PutPublicMembersIdWithResponse(ctx context.Context, id string, body PutPublicMembersIdJSONRequestBody) (*PutPublicMembersIdResponse, error) {
	rsp, err := c.PutPublicMembersId(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicMembersIdResponse(rsp)
}

// GetPublicMembersIdGroupIdsWithResponse request returning *GetPublicMembersIdGroupIdsResponse
func (c *ClientWithResponses) GetPublicMembersIdGroupIdsWithResponse(ctx context.Context, id string) (*GetPublicMembersIdGroupIdsResponse, error) {
	rsp, err := c.GetPublicMembersIdGroupIds(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMembersIdGroupIdsResponse(rsp)
}

// PutPublicMembersIdGroupIdsWithBodyWithResponse request with arbitrary body returning *PutPublicMembersIdGroupIdsResponse
func (c *ClientWithResponses) PutPublicMembersIdGroupIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PutPublicMembersIdGroupIdsResponse, error) {
	rsp, err := c.PutPublicMembersIdGroupIdsWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicMembersIdGroupIdsResponse(rsp)
}

func (c *ClientWithResponses) PutPublicMembersIdGroupIdsWithResponse(ctx context.Context, id string, body PutPublicMembersIdGroupIdsJSONRequestBody) (*PutPublicMembersIdGroupIdsResponse, error) {
	rsp, err := c.PutPublicMembersIdGroupIds(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicMembersIdGroupIdsResponse(rsp)
}

// PostPublicMembersIdReinviteWithResponse request returning *PostPublicMembersIdReinviteResponse
func (c *ClientWithResponses) PostPublicMembersIdReinviteWithResponse(ctx context.Context, id string) (*PostPublicMembersIdReinviteResponse, error) {
	rsp, err := c.PostPublicMembersIdReinvite(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicMembersIdReinviteResponse(rsp)
}

// PostPublicOrganizationImportWithBodyWithResponse request with arbitrary body returning *PostPublicOrganizationImportResponse
func (c *ClientWithResponses) PostPublicOrganizationImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostPublicOrganizationImportResponse, error) {
	rsp, err := c.PostPublicOrganizationImportWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicOrganizationImportResponse(rsp)
}

func (c *ClientWithResponses) PostPublicOrganizationImportWithResponse(ctx context.Context, body PostPublicOrganizationImportJSONRequestBody) (*PostPublicOrganizationImportResponse, error) {
	rsp, err := c.PostPublicOrganizationImport(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicOrganizationImportResponse(rsp)
}

// GetPublicPoliciesWithResponse request returning *GetPublicPoliciesResponse
func (c *ClientWithResponses) GetPublicPoliciesWithResponse(ctx context.Context) (*GetPublicPoliciesResponse, error) {
	rsp, err := c.GetPublicPolicies(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicPoliciesResponse(rsp)
}

// PutPublicPoliciesIdWithBodyWithResponse request with arbitrary body returning *PutPublicPoliciesIdResponse
func (c *ClientWithResponses) PutPublicPoliciesIdWithBodyWithResponse(ctx context.Context, id string, params *PutPublicPoliciesIdParams, contentType string, body io.Reader) (*PutPublicPoliciesIdResponse, error) {
	rsp, err := c.PutPublicPoliciesIdWithBody(ctx, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicPoliciesIdResponse(rsp)
}

func (c *ClientWithResponses) PutPublicPoliciesIdWithResponse(ctx context.Context, id string, params *PutPublicPoliciesIdParams, body PutPublicPoliciesIdJSONRequestBody) (*PutPublicPoliciesIdResponse, error) {
	rsp, err := c.PutPublicPoliciesId(ctx, id, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePutPublicPoliciesIdResponse(rsp)
}

// GetPublicPoliciesTypeWithResponse request returning *GetPublicPoliciesTypeResponse
func (c *ClientWithResponses) GetPublicPoliciesTypeWithResponse(ctx context.Context, pType PolicyType) (*GetPublicPoliciesTypeResponse, error) {
	rsp, err := c.GetPublicPoliciesType(ctx, pType)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicPoliciesTypeResponse(rsp)
}

// ParseGetPublicCollectionsResponse parses an HTTP response from a GetPublicCollectionsWithResponse call
func ParseGetPublicCollectionsResponse(rsp *http.Response) (*GetPublicCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeletePublicCollectionsIdResponse parses an HTTP response from a DeletePublicCollectionsIdWithResponse call
func ParseDeletePublicCollectionsIdResponse(rsp *http.Response) (*DeletePublicCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPublicCollectionsIdResponse parses an HTTP response from a GetPublicCollectionsIdWithResponse call
func ParseGetPublicCollectionsIdResponse(rsp *http.Response) (*GetPublicCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicCollectionsIdResponse parses an HTTP response from a PutPublicCollectionsIdWithResponse call
func ParsePutPublicCollectionsIdResponse(rsp *http.Response) (*PutPublicCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicEventsResponse parses an HTTP response from a GetPublicEventsWithResponse call
func ParseGetPublicEventsResponse(rsp *http.Response) (*GetPublicEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicGroupsResponse parses an HTTP response from a GetPublicGroupsWithResponse call
func ParseGetPublicGroupsResponse(rsp *http.Response) (*GetPublicGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPublicGroupsResponse parses an HTTP response from a PostPublicGroupsWithResponse call
func ParsePostPublicGroupsResponse(rsp *http.Response) (*PostPublicGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPublicGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeletePublicGroupsIdResponse parses an HTTP response from a DeletePublicGroupsIdWithResponse call
func ParseDeletePublicGroupsIdResponse(rsp *http.Response) (*DeletePublicGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPublicGroupsIdResponse parses an HTTP response from a GetPublicGroupsIdWithResponse call
func ParseGetPublicGroupsIdResponse(rsp *http.Response) (*GetPublicGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicGroupsIdResponse parses an HTTP response from a PutPublicGroupsIdWithResponse call
func ParsePutPublicGroupsIdResponse(rsp *http.Response) (*PutPublicGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicGroupsIdMemberIdsResponse parses an HTTP response from a GetPublicGroupsIdMemberIdsWithResponse call
func ParseGetPublicGroupsIdMemberIdsResponse(rsp *http.Response) (*GetPublicGroupsIdMemberIdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicGroupsIdMemberIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicGroupsIdMemberIdsResponse parses an HTTP response from a PutPublicGroupsIdMemberIdsWithResponse call
func ParsePutPublicGroupsIdMemberIdsResponse(rsp *http.Response) (*PutPublicGroupsIdMemberIdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicGroupsIdMemberIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicMembersResponse parses an HTTP response from a GetPublicMembersWithResponse call
func ParseGetPublicMembersResponse(rsp *http.Response) (*GetPublicMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPublicMembersResponse parses an HTTP response from a PostPublicMembersWithResponse call
func ParsePostPublicMembersResponse(rsp *http.Response) (*PostPublicMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPublicMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeletePublicMembersIdResponse parses an HTTP response from a DeletePublicMembersIdWithResponse call
func ParseDeletePublicMembersIdResponse(rsp *http.Response) (*DeletePublicMembersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicMembersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPublicMembersIdResponse parses an HTTP response from a GetPublicMembersIdWithResponse call
func ParseGetPublicMembersIdResponse(rsp *http.Response) (*GetPublicMembersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMembersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicMembersIdResponse parses an HTTP response from a PutPublicMembersIdWithResponse call
func ParsePutPublicMembersIdResponse(rsp *http.Response) (*PutPublicMembersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicMembersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicMembersIdGroupIdsResponse parses an HTTP response from a GetPublicMembersIdGroupIdsWithResponse call
func ParseGetPublicMembersIdGroupIdsResponse(rsp *http.Response) (*GetPublicMembersIdGroupIdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMembersIdGroupIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicMembersIdGroupIdsResponse parses an HTTP response from a PutPublicMembersIdGroupIdsWithResponse call
func ParsePutPublicMembersIdGroupIdsResponse(rsp *http.Response) (*PutPublicMembersIdGroupIdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicMembersIdGroupIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPublicMembersIdReinviteResponse parses an HTTP response from a PostPublicMembersIdReinviteWithResponse call
func ParsePostPublicMembersIdReinviteResponse(rsp *http.Response) (*PostPublicMembersIdReinviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPublicMembersIdReinviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPublicOrganizationImportResponse parses an HTTP response from a PostPublicOrganizationImportWithResponse call
func ParsePostPublicOrganizationImportResponse(rsp *http.Response) (*PostPublicOrganizationImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPublicOrganizationImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicPoliciesResponse parses an HTTP response from a GetPublicPoliciesWithResponse call
func ParseGetPublicPoliciesResponse(rsp *http.Response) (*GetPublicPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPublicPoliciesIdResponse parses an HTTP response from a PutPublicPoliciesIdWithResponse call
func ParsePutPublicPoliciesIdResponse(rsp *http.Response) (*PutPublicPoliciesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPublicPoliciesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicPoliciesTypeResponse parses an HTTP response from a GetPublicPoliciesTypeWithResponse call
func ParseGetPublicPoliciesTypeResponse(rsp *http.Response) (*GetPublicPoliciesTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicPoliciesTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
